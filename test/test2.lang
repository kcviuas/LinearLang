letLin x = newRes("aaa")
letLin y = newRes("bbb")
letUn ff = fun (xx:LinRes){
    xx
}

begin
    if eq?(2,3)
    then 
        begin freeAtom(x); freeAtom(y) end
    else 
        begin freeAtom(y); freeAtom(x) end;

    letLin xa = newRes("xxx")
    letLin ya = ff(xa)
    letLin ll = linCons(ya,null)
    if-null ll
    then freeList(ll)
    else split ll as carx cdrx
         copyAtom carx as xx1 xx2
         copyList cdrx as yy1 yy2
         letLin rt1 = linCons(xx1,yy1)
         letLin rt2 = linCons(xx2,yy2)
         begin
            freeList(rt1);
            freeList(rt2)
         end;
    letLin vv = newRes("vv")
    freeAtom(vv);

    letLin zz = newRes("zzz")
    letLin zza = linCons(zz,null)
    split zza as caa cbb
    begin
        freeAtom(caa);
        freeList(cbb)
    end;

    letUn fact = fix fun (f:(Number -> Number)){
        fun (x:Number){
            if eq?(x,1) 
            then 1
            else mul(x,f(sub(x,1)))
        }
    }
    freeList(null);

    letUn reverse = fix fun (re:(LinList -> LinList)){
        fun (list:LinList){
            if-null list
            then list
            else split list as carx cdrx
                 appendList(re(cdrx),linCons(carx,null))
        }
    }
    freeList(null);

    letUn findAt = fix fun(f:(Number -> (LinList -> LinRes))){
        fun (index:Number){
            fun (list:LinList){
                if and(le?(0,index), not(eq?(1,index)))
                then if-null list
                     then begin freeList(list); newRes("false") end
                     else split list as carx cdrx
                          begin
                             freeAtom(carx);
                             f(sub(index,1))(cdrx)
                          end
                else if eq?(1,index)
                     then split list as carx cdrx
                          begin freeList(cdrx); carx end
                     else begin freeList(list); newRes("false") end
            }
        }
    }
    letLin list = linCons(newRes("aaa"),linCons(newRes("bbb"),null))
    copyList list as l1 l2
    letLin t = findAt(1)(l1)
    begin
        freeList(l2);
        print(t)
    end
end

